{"ast":null,"code":"import logger from '../../utils/logger';\nimport isSubset from '../../utils/isSubset';\nimport updateObject from '../../utils/updateObject';\nimport success from '../../api-utils/success';\nimport error from '../../api-utils/error';\nimport showUserErrors from '../../api-utils/showUserErrors';\nexport default function update(docUpdates) {\n  var _this = this;\n\n  var collectionName = this.collectionName;\n  var docSelectionCriteria = this.docSelectionCriteria;\n  return new Promise(function (resolve, reject) {\n    // update document by criteria\n    _this.updateDocumentByCriteria = function () {\n      var docsToUpdate = [];\n\n      _this.lf[collectionName].iterate(function (value, key) {\n        if (isSubset(value, docSelectionCriteria)) {\n          var newDocument = updateObject(value, docUpdates);\n          docsToUpdate.push({\n            key: key,\n            newDocument: newDocument\n          });\n        }\n      }).then(function () {\n        if (!docsToUpdate.length) {\n          reject(error.call(_this, \"No Documents found in \".concat(collectionName, \" Collection with criteria \").concat(JSON.stringify(docSelectionCriteria), \".\")));\n        }\n\n        if (docsToUpdate.length > 1) {\n          logger.warn.call(_this, \"Multiple documents (\".concat(docsToUpdate.length, \") with \").concat(JSON.stringify(docSelectionCriteria), \" found for updating.\"));\n        }\n      }).then(function () {\n        docsToUpdate.forEach(function (docToUpdate, index) {\n          _this.lf[collectionName].setItem(docToUpdate.key, docToUpdate.newDocument).then(function (value) {\n            if (index === docsToUpdate.length - 1) {\n              resolve(success.call(_this, \"\".concat(docsToUpdate.length, \" Document\").concat(docsToUpdate.length > 1 ? 's' : '', \" in \\\"\").concat(collectionName, \"\\\" collection with \").concat(JSON.stringify(docSelectionCriteria), \" updated with:\"), docUpdates));\n            }\n          }).catch(function (err) {\n            reject(error.call(_this, \"Could not update \".concat(docsToUpdate.length, \" Documents in \").concat(collectionName, \" Collection.\")));\n          });\n        });\n      });\n    }; // update document by key\n\n\n    _this.updateDocumentByKey = function () {\n      var newDocument = {};\n\n      _this.lf[collectionName].getItem(docSelectionCriteria).then(function (value) {\n        newDocument = updateObject(value, docUpdates);\n\n        _this.lf[collectionName].setItem(docSelectionCriteria, newDocument);\n\n        resolve(success.call(_this, \"Document in \\\"\".concat(collectionName, \"\\\" collection with key \").concat(JSON.stringify(docSelectionCriteria), \" updated to:\"), newDocument));\n      }).catch(function (err) {\n        reject(error.call(_this, \"No Document found in \\\"\".concat(collectionName, \"\\\" collection with key \").concat(JSON.stringify(docSelectionCriteria))));\n      });\n    }; // check for user errors\n\n\n    if (!docUpdates) {\n      _this.userErrors.push('No update object provided to update() method. Use an object e.g. { name: \"William\" }');\n    } else if (!(typeof docUpdates == 'object' && docUpdates instanceof Array == false)) {\n      _this.userErrors.push('Data passed to .update() must be an object. Not an array, string, number or boolean.');\n    }\n\n    if (!_this.userErrors.length) {\n      if (typeof docSelectionCriteria == 'object') {\n        _this.updateDocumentByCriteria();\n      } else {\n        _this.updateDocumentByKey();\n      }\n    } else {\n      showUserErrors.call(_this);\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/localbase/localbase/api/actions/update.js"],"names":["logger","isSubset","updateObject","success","error","showUserErrors","update","docUpdates","collectionName","docSelectionCriteria","Promise","resolve","reject","updateDocumentByCriteria","docsToUpdate","lf","iterate","value","key","newDocument","push","then","length","call","JSON","stringify","warn","forEach","docToUpdate","index","setItem","catch","err","updateDocumentByKey","getItem","userErrors","Array"],"mappings":"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","sourcesContent":["import logger from '../../utils/logger'\r\nimport isSubset from '../../utils/isSubset'\r\nimport updateObject from '../../utils/updateObject'\r\nimport success from '../../api-utils/success'\r\nimport error from '../../api-utils/error'\r\nimport showUserErrors from '../../api-utils/showUserErrors'\r\n\r\nexport default function update(docUpdates) {\r\n  let collectionName = this.collectionName\r\n  let docSelectionCriteria = this.docSelectionCriteria\r\n\r\n  return new Promise((resolve, reject) => {\r\n\r\n    // update document by criteria\r\n    this.updateDocumentByCriteria = () => {\r\n      let docsToUpdate = []\r\n      this.lf[collectionName].iterate((value, key) => {\r\n        if (isSubset(value, docSelectionCriteria)) {\r\n          let newDocument = updateObject(value, docUpdates)\r\n          docsToUpdate.push({ key, newDocument })\r\n        }\r\n      }).then(() => {\r\n        if (!docsToUpdate.length) {\r\n          reject(\r\n            error.call(\r\n              this,\r\n              `No Documents found in ${ collectionName } Collection with criteria ${ JSON.stringify(docSelectionCriteria) }.`\r\n            )\r\n          )\r\n        }\r\n        if (docsToUpdate.length > 1) {\r\n          logger.warn.call(this, `Multiple documents (${ docsToUpdate.length }) with ${ JSON.stringify(docSelectionCriteria) } found for updating.`)\r\n        }\r\n      }).then(() => {\r\n        docsToUpdate.forEach((docToUpdate, index) => {\r\n          this.lf[collectionName].setItem(docToUpdate.key, docToUpdate.newDocument).then(value => {\r\n\r\n            if (index === (docsToUpdate.length - 1)) {\r\n              resolve(\r\n                success.call(\r\n                  this,\r\n                  `${ docsToUpdate.length } Document${ docsToUpdate.length > 1 ? 's' : '' } in \"${ collectionName }\" collection with ${ JSON.stringify(docSelectionCriteria) } updated with:`,\r\n                  docUpdates\r\n                )\r\n              )\r\n            }\r\n\r\n          }).catch(err => {\r\n            reject(\r\n              error.call(\r\n                this,\r\n                `Could not update ${ docsToUpdate.length } Documents in ${ collectionName } Collection.`\r\n              )\r\n            )\r\n          })\r\n        })\r\n      })\r\n    }\r\n  \r\n    // update document by key\r\n    this.updateDocumentByKey = () => {\r\n      let newDocument = {}\r\n      this.lf[collectionName].getItem(docSelectionCriteria).then(value => {\r\n        newDocument = updateObject(value, docUpdates)\r\n        this.lf[collectionName].setItem(docSelectionCriteria, newDocument)\r\n        resolve(\r\n          success.call(\r\n            this,\r\n            `Document in \"${ collectionName }\" collection with key ${ JSON.stringify(docSelectionCriteria) } updated to:`,\r\n            newDocument\r\n          )\r\n        )\r\n      }).catch(err => {\r\n        reject(\r\n          error.call(\r\n            this,\r\n            `No Document found in \"${ collectionName }\" collection with key ${ JSON.stringify(docSelectionCriteria) }`\r\n          )\r\n        )\r\n      })\r\n    }\r\n\r\n    // check for user errors\r\n    if (!docUpdates) {\r\n      this.userErrors.push('No update object provided to update() method. Use an object e.g. { name: \"William\" }')\r\n    }\r\n    else if (!(typeof docUpdates == 'object' && docUpdates instanceof Array == false)) {\r\n      this.userErrors.push('Data passed to .update() must be an object. Not an array, string, number or boolean.')\r\n    }\r\n\r\n    if (!this.userErrors.length) {\r\n      if (typeof docSelectionCriteria == 'object') {\r\n        this.updateDocumentByCriteria()\r\n      }\r\n      else {\r\n        this.updateDocumentByKey()\r\n      }\r\n    }\r\n    else {\r\n      showUserErrors.call(this)\r\n    }\r\n\r\n  })\r\n\r\n}"]},"metadata":{},"sourceType":"module"}