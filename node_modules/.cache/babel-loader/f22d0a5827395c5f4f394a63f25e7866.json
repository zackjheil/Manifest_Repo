{"ast":null,"code":"import _classCallCheck from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\r\n * RegExpRoute makes it easy to create a regular expression based\r\n * [Route]{@link module:workbox-routing.Route}.\r\n *\r\n * For same-origin requests the RegExp only needs to match part of the URL. For\r\n * requests against third-party servers, you must define a RegExp that matches\r\n * the start of the URL.\r\n *\r\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\r\n *\r\n * @memberof module:workbox-routing\r\n * @extends module:workbox-routing.Route\r\n */\n\nvar RegExpRoute = /*#__PURE__*/function (_Route) {\n  _inherits(RegExpRoute, _Route);\n\n  var _super = _createSuper(RegExpRoute);\n\n  /**\r\n   * If the regular expression contains\r\n   * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\r\n   * the captured values will be passed to the\r\n   * [handler's]{@link module:workbox-routing~handlerCallback} `params`\r\n   * argument.\r\n   *\r\n   * @param {RegExp} regExp The regular expression to match against URLs.\r\n   * @param {module:workbox-routing~handlerCallback} handler A callback\r\n   * function that returns a Promise resulting in a Response.\r\n   * @param {string} [method='GET'] The HTTP method to match the Route\r\n   * against.\r\n   */\n  function RegExpRoute(regExp, handler, method) {\n    _classCallCheck(this, RegExpRoute);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(regExp, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'RegExpRoute',\n        funcName: 'constructor',\n        paramName: 'pattern'\n      });\n    }\n\n    var match = function match(_ref) {\n      var url = _ref.url;\n      var result = regExp.exec(url.href); // Return immediately if there's no match.\n\n      if (!result) {\n        return;\n      } // Require that the match start at the first character in the URL string\n      // if it's a cross-origin request.\n      // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n      // behind this behavior.\n\n\n      if (url.origin !== location.origin && result.index !== 0) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.debug(\"The regular expression '\".concat(regExp, \"' only partially matched \") + \"against the cross-origin URL '\".concat(url, \"'. RegExpRoute's will only \") + \"handle cross-origin requests if they match the entire URL.\");\n        }\n\n        return;\n      } // If the route matches, but there aren't any capture groups defined, then\n      // this will return [], which is truthy and therefore sufficient to\n      // indicate a match.\n      // If there are capture groups, then it will return their values.\n\n\n      return result.slice(1);\n    };\n\n    return _super.call(this, match, handler, method);\n  }\n\n  return RegExpRoute;\n}(Route);\n\nexport { RegExpRoute };","map":{"version":3,"sources":["C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/workbox-routing/RegExpRoute.js"],"names":["assert","logger","Route","RegExpRoute","regExp","handler","method","process","env","NODE_ENV","isInstance","RegExp","moduleName","className","funcName","paramName","match","url","result","exec","href","origin","location","index","debug","slice"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,iCAAvB;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,W;;;;;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,uBAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,MAA7B,EAAqC;AAAA;;AACjC,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCT,MAAAA,MAAM,CAACU,UAAP,CAAkBN,MAAlB,EAA0BO,MAA1B,EAAkC;AAC9BC,QAAAA,UAAU,EAAE,iBADkB;AAE9BC,QAAAA,SAAS,EAAE,aAFmB;AAG9BC,QAAAA,QAAQ,EAAE,aAHoB;AAI9BC,QAAAA,SAAS,EAAE;AAJmB,OAAlC;AAMH;;AACD,QAAMC,KAAK,GAAG,SAARA,KAAQ,OAAa;AAAA,UAAVC,GAAU,QAAVA,GAAU;AACvB,UAAMC,MAAM,GAAGd,MAAM,CAACe,IAAP,CAAYF,GAAG,CAACG,IAAhB,CAAf,CADuB,CAEvB;;AACA,UAAI,CAACF,MAAL,EAAa;AACT;AACH,OALsB,CAMvB;AACA;AACA;AACA;;;AACA,UAAKD,GAAG,CAACI,MAAJ,KAAeC,QAAQ,CAACD,MAAzB,IAAqCH,MAAM,CAACK,KAAP,KAAiB,CAA1D,EAA8D;AAC1D,YAAIhB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCR,UAAAA,MAAM,CAACuB,KAAP,CAAa,kCAA2BpB,MAA3B,yEACwBa,GADxB,+FAAb;AAGH;;AACD;AACH,OAjBsB,CAkBvB;AACA;AACA;AACA;;;AACA,aAAOC,MAAM,CAACO,KAAP,CAAa,CAAb,CAAP;AACH,KAvBD;;AATiC,6BAiC3BT,KAjC2B,EAiCpBX,OAjCoB,EAiCXC,MAjCW;AAkCpC;;;EAhDqBJ,K;;AAkD1B,SAASC,WAAT","sourcesContent":["/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { Route } from './Route.js';\r\nimport './_version.js';\r\n/**\r\n * RegExpRoute makes it easy to create a regular expression based\r\n * [Route]{@link module:workbox-routing.Route}.\r\n *\r\n * For same-origin requests the RegExp only needs to match part of the URL. For\r\n * requests against third-party servers, you must define a RegExp that matches\r\n * the start of the URL.\r\n *\r\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\r\n *\r\n * @memberof module:workbox-routing\r\n * @extends module:workbox-routing.Route\r\n */\r\nclass RegExpRoute extends Route {\r\n    /**\r\n     * If the regular expression contains\r\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\r\n     * the captured values will be passed to the\r\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\r\n     * argument.\r\n     *\r\n     * @param {RegExp} regExp The regular expression to match against URLs.\r\n     * @param {module:workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     * @param {string} [method='GET'] The HTTP method to match the Route\r\n     * against.\r\n     */\r\n    constructor(regExp, handler, method) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(regExp, RegExp, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'RegExpRoute',\r\n                funcName: 'constructor',\r\n                paramName: 'pattern',\r\n            });\r\n        }\r\n        const match = ({ url }) => {\r\n            const result = regExp.exec(url.href);\r\n            // Return immediately if there's no match.\r\n            if (!result) {\r\n                return;\r\n            }\r\n            // Require that the match start at the first character in the URL string\r\n            // if it's a cross-origin request.\r\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\r\n            // behind this behavior.\r\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.debug(`The regular expression '${regExp}' only partially matched ` +\r\n                        `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\r\n                        `handle cross-origin requests if they match the entire URL.`);\r\n                }\r\n                return;\r\n            }\r\n            // If the route matches, but there aren't any capture groups defined, then\r\n            // this will return [], which is truthy and therefore sufficient to\r\n            // indicate a match.\r\n            // If there are capture groups, then it will return their values.\r\n            return result.slice(1);\r\n        };\r\n        super(match, handler, method);\r\n    }\r\n}\r\nexport { RegExpRoute };\r\n"]},"metadata":{},"sourceType":"module"}