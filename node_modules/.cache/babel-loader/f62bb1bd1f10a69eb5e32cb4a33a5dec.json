{"ast":null,"code":"/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\r\n * Helper function that calls\r\n * {@link PrecacheController#createHandler} on the default\r\n * {@link PrecacheController} instance.\r\n *\r\n * If you are creating your own {@link PrecacheController}, then call the\r\n * {@link PrecacheController#createHandler} on that instance,\r\n * instead of using this function.\r\n *\r\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\r\n * response from the network if there's a precache miss.\r\n * @return {module:workbox-routing~handlerCallback}\r\n *\r\n * @memberof module:workbox-precaching\r\n */\n\nfunction createHandler() {\n  var fallbackToNetwork = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var precacheController = getOrCreatePrecacheController();\n  return precacheController.createHandler(fallbackToNetwork);\n}\n\nexport { createHandler };","map":{"version":3,"sources":["C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/workbox-precaching/createHandler.js"],"names":["getOrCreatePrecacheController","createHandler","fallbackToNetwork","precacheController"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,6BAAT,QAA8C,0CAA9C;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,GAAiD;AAAA,MAA1BC,iBAA0B,uEAAN,IAAM;AAC7C,MAAMC,kBAAkB,GAAGH,6BAA6B,EAAxD;AACA,SAAOG,kBAAkB,CAACF,aAAnB,CAAiCC,iBAAjC,CAAP;AACH;;AACD,SAASD,aAAT","sourcesContent":["/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Helper function that calls\r\n * {@link PrecacheController#createHandler} on the default\r\n * {@link PrecacheController} instance.\r\n *\r\n * If you are creating your own {@link PrecacheController}, then call the\r\n * {@link PrecacheController#createHandler} on that instance,\r\n * instead of using this function.\r\n *\r\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\r\n * response from the network if there's a precache miss.\r\n * @return {module:workbox-routing~handlerCallback}\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction createHandler(fallbackToNetwork = true) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    return precacheController.createHandler(fallbackToNetwork);\r\n}\r\nexport { createHandler };\r\n"]},"metadata":{},"sourceType":"module"}