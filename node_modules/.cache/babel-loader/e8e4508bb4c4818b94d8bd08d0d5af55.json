{"ast":null,"code":"import isSubset from '../../utils/isSubset';\nimport logger from \"../../utils/logger\";\nimport reset from '../../api-utils/reset';\nimport selectionLevel from '../../api-utils/selectionLevel';\nimport showUserErrors from '../../api-utils/showUserErrors';\nexport default function get(options = {\n  keys: false\n}) {\n  // get collection\n  this.getCollection = () => {\n    let collectionName = this.collectionName;\n    let orderByProperty = this.orderByProperty;\n    let orderByDirection = this.orderByDirection;\n    let limitBy = this.limitBy;\n    let collection = [];\n    return this.lf[collectionName].iterate((value, key) => {\n      let collectionItem = {};\n\n      if (!options.keys) {\n        collectionItem = value;\n      } else {\n        collectionItem = {\n          key: key,\n          data: value\n        };\n      }\n\n      collection.push(collectionItem);\n    }).then(() => {\n      let logMessage = `Got \"${collectionName}\" collection`; // orderBy\n\n      if (orderByProperty) {\n        logMessage += `, ordered by \"${orderByProperty}\"`;\n\n        if (!options.keys) {\n          collection.sort((a, b) => {\n            return a[orderByProperty].toString().localeCompare(b[orderByProperty].toString());\n          });\n        } else {\n          collection.sort((a, b) => {\n            return a.data[orderByProperty].toString().localeCompare(b.data[orderByProperty].toString());\n          });\n        }\n      }\n\n      if (orderByDirection == 'desc') {\n        logMessage += ` (descending)`;\n        collection.reverse();\n      } // limit\n\n\n      if (limitBy) {\n        logMessage += `, limited to ${limitBy}`;\n        collection = collection.splice(0, limitBy);\n      }\n\n      logMessage += `:`;\n      logger.log.call(this, logMessage, collection);\n      reset.call(this);\n      return collection;\n    });\n  }; // get document\n\n\n  this.getDocument = () => {\n    let collectionName = this.collectionName;\n    let docSelectionCriteria = this.docSelectionCriteria;\n    let collection = [];\n    let document = {}; // get document by criteria\n\n    this.getDocumentByCriteria = () => {\n      return this.lf[collectionName].iterate((value, key) => {\n        if (isSubset(value, docSelectionCriteria)) {\n          collection.push(value);\n        }\n      }).then(() => {\n        if (!collection.length) {\n          logger.error.call(this, `Could not find Document in \"${collectionName}\" collection with criteria: ${JSON.stringify(docSelectionCriteria)}`);\n        } else {\n          document = collection[0];\n          logger.log.call(this, `Got Document with ${JSON.stringify(docSelectionCriteria)}:`, document);\n          reset.call(this);\n          return document;\n        }\n      });\n    }; // get document by key\n\n\n    this.getDocumentByKey = () => {\n      return this.lf[collectionName].getItem(docSelectionCriteria).then(value => {\n        document = value;\n\n        if (document) {\n          logger.log.call(this, `Got Document with key ${JSON.stringify(docSelectionCriteria)}:`, document);\n        } else {\n          logger.error.call(this, `Could not find Document in \"${collectionName}\" collection with Key: ${JSON.stringify(docSelectionCriteria)}`);\n        }\n\n        reset.call(this);\n        return document;\n      }).catch(err => {\n        logger.error.call(this, `Could not find Document in \"${collectionName}\" collection with Key: ${JSON.stringify(docSelectionCriteria)}`);\n        reset.call(this);\n      });\n    };\n\n    if (typeof docSelectionCriteria == 'object') {\n      return this.getDocumentByCriteria();\n    } else {\n      return this.getDocumentByKey();\n    }\n  }; // check for user errors\n\n\n  if (!(typeof options == 'object' && options instanceof Array == false)) {\n    this.userErrors.push('Data passed to .get() must be an object. Not an array, string, number or boolean. The object must contain a \"keys\" property set to true or false, e.g. { keys: true }');\n  } else {\n    if (!options.hasOwnProperty('keys')) {\n      this.userErrors.push('Object passed to get() method must contain a \"keys\" property set to boolean true or false, e.g. { keys: true }');\n    } else {\n      if (typeof options.keys !== 'boolean') {\n        this.userErrors.push('Property \"keys\" passed into get() method must be assigned a boolean value (true or false). Not a string or integer.');\n      }\n    }\n  }\n\n  if (!this.userErrors.length) {\n    let currentSelectionLevel = selectionLevel.call(this);\n\n    if (currentSelectionLevel == 'collection') {\n      return this.getCollection();\n    } else if (currentSelectionLevel == 'doc') {\n      return this.getDocument();\n    }\n  } else {\n    showUserErrors.call(this);\n    return null;\n  }\n}","map":{"version":3,"sources":["C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/localbase/localbase/api/actions/get.js"],"names":["isSubset","logger","reset","selectionLevel","showUserErrors","get","options","keys","getCollection","collectionName","orderByProperty","orderByDirection","limitBy","collection","lf","iterate","value","key","collectionItem","data","push","then","logMessage","sort","a","b","toString","localeCompare","reverse","splice","log","call","getDocument","docSelectionCriteria","document","getDocumentByCriteria","length","error","JSON","stringify","getDocumentByKey","getItem","catch","err","Array","userErrors","hasOwnProperty","currentSelectionLevel"],"mappings":"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","sourcesContent":["import isSubset from '../../utils/isSubset'\r\nimport logger from \"../../utils/logger\"\r\nimport reset from '../../api-utils/reset'\r\nimport selectionLevel from '../../api-utils/selectionLevel'\r\nimport showUserErrors from '../../api-utils/showUserErrors'\r\n\r\nexport default function get(options = { keys: false }) {\r\n\r\n  // get collection\r\n  this.getCollection = () => {\r\n    let collectionName = this.collectionName\r\n    let orderByProperty = this.orderByProperty\r\n    let orderByDirection = this.orderByDirection\r\n    let limitBy = this.limitBy\r\n\r\n    let collection = []\r\n    return this.lf[collectionName].iterate((value, key) => {\r\n      let collectionItem = {}\r\n      if (!options.keys) {\r\n        collectionItem = value\r\n      }\r\n      else {\r\n        collectionItem = {\r\n          key: key,\r\n          data: value\r\n        }\r\n      }\r\n      collection.push(collectionItem)\r\n    }).then(() => {\r\n      let logMessage = `Got \"${ collectionName }\" collection`\r\n      // orderBy\r\n      if (orderByProperty) {\r\n        logMessage += `, ordered by \"${ orderByProperty }\"`\r\n        if (!options.keys) {\r\n          collection.sort((a, b) => {\r\n            return a[orderByProperty].toString().localeCompare(b[orderByProperty].toString())\r\n          })\r\n        }\r\n        else {\r\n          collection.sort((a, b) => {\r\n            return a.data[orderByProperty].toString().localeCompare(b.data[orderByProperty].toString())\r\n          })\r\n        }\r\n      }\r\n      if (orderByDirection == 'desc') {\r\n        logMessage += ` (descending)`\r\n        collection.reverse()\r\n      }\r\n      // limit\r\n      if (limitBy) {\r\n        logMessage += `, limited to ${ limitBy }`\r\n        collection = collection.splice(0,limitBy)\r\n      }\r\n      logMessage += `:`\r\n      logger.log.call(this, logMessage, collection)\r\n      reset.call(this)\r\n      return collection\r\n    })\r\n  }\r\n\r\n  // get document\r\n  this.getDocument = () => {\r\n    let collectionName = this.collectionName\r\n    let docSelectionCriteria = this.docSelectionCriteria\r\n\r\n    let collection = []\r\n    let document = {}\r\n\r\n    // get document by criteria\r\n    this.getDocumentByCriteria = () => {\r\n      return this.lf[collectionName].iterate((value, key) => {\r\n        if (isSubset(value, docSelectionCriteria)) {\r\n          collection.push(value)\r\n        }\r\n      }).then(() => {\r\n        if (!collection.length) {\r\n          logger.error.call(this, `Could not find Document in \"${ collectionName }\" collection with criteria: ${ JSON.stringify(docSelectionCriteria)}`)\r\n        }\r\n        else {\r\n          document = collection[0]\r\n          logger.log.call(this, `Got Document with ${ JSON.stringify(docSelectionCriteria) }:`, document)\r\n          reset.call(this)\r\n          return document\r\n        }\r\n      })\r\n    }\r\n\r\n    // get document by key\r\n    this.getDocumentByKey = () => {\r\n      return this.lf[collectionName].getItem(docSelectionCriteria).then((value) => {\r\n        document = value\r\n        if (document) {\r\n          logger.log.call(this, `Got Document with key ${ JSON.stringify(docSelectionCriteria) }:`, document)\r\n        }\r\n        else {\r\n          logger.error.call(this, `Could not find Document in \"${ collectionName }\" collection with Key: ${ JSON.stringify(docSelectionCriteria)}`)\r\n        }\r\n        reset.call(this)\r\n        return document\r\n      }).catch(err => {\r\n        logger.error.call(this, `Could not find Document in \"${ collectionName }\" collection with Key: ${ JSON.stringify(docSelectionCriteria)}`)\r\n        reset.call(this)\r\n      });\r\n    }\r\n\r\n    if (typeof docSelectionCriteria == 'object') {\r\n      return this.getDocumentByCriteria()\r\n    }\r\n    else {\r\n      return this.getDocumentByKey()\r\n    }\r\n  }\r\n\r\n  // check for user errors\r\n  if (!(typeof options == 'object' && options instanceof Array == false)) {\r\n    this.userErrors.push('Data passed to .get() must be an object. Not an array, string, number or boolean. The object must contain a \"keys\" property set to true or false, e.g. { keys: true }')\r\n  }\r\n  else {\r\n    if (!options.hasOwnProperty('keys')) {\r\n      this.userErrors.push('Object passed to get() method must contain a \"keys\" property set to boolean true or false, e.g. { keys: true }')\r\n    }\r\n    else {\r\n      if (typeof options.keys !== 'boolean') {\r\n        this.userErrors.push('Property \"keys\" passed into get() method must be assigned a boolean value (true or false). Not a string or integer.')\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!this.userErrors.length) {\r\n    let currentSelectionLevel = selectionLevel.call(this)\r\n\r\n    if (currentSelectionLevel == 'collection') {\r\n      return this.getCollection()\r\n    }\r\n    else if (currentSelectionLevel == 'doc') {\r\n      return this.getDocument()\r\n    }\r\n  }\r\n  else {\r\n    showUserErrors.call(this)\r\n    return null\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}