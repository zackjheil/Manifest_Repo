{"ast":null,"code":"/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { addFetchListener } from './utils/addFetchListener.js';\nimport './_version.js';\nvar listenerAdded = false;\n/**\r\n * Add a `fetch` listener to the service worker that will\r\n * respond to\r\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\r\n * with precached assets.\r\n *\r\n * Requests for assets that aren't precached, the `FetchEvent` will not be\r\n * responded to, allowing the event to fall through to other `fetch` event\r\n * listeners.\r\n *\r\n * @param {Object} [options]\r\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\r\n * check cache entries for a URLs ending with '/' to see if there is a hit when\r\n * appending the `directoryIndex` value.\r\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\r\n * array of regex's to remove search params when looking for a cache match.\r\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\r\n * check the cache for the URL with a `.html` added to the end of the end.\r\n * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]\r\n * This is a function that should take a URL and return an array of\r\n * alternative URLs that should be checked for precache matches.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\n\nfunction addRoute(options) {\n  if (!listenerAdded) {\n    addFetchListener(options);\n    listenerAdded = true;\n  }\n}\n\nexport { addRoute };","map":{"version":3,"sources":["C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/workbox-precaching/addRoute.js"],"names":["addFetchListener","listenerAdded","addRoute","options"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAO,eAAP;AACA,IAAIC,aAAa,GAAG,KAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACvB,MAAI,CAACF,aAAL,EAAoB;AAChBD,IAAAA,gBAAgB,CAACG,OAAD,CAAhB;AACAF,IAAAA,aAAa,GAAG,IAAhB;AACH;AACJ;;AACD,SAASC,QAAT","sourcesContent":["/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { addFetchListener } from './utils/addFetchListener.js';\r\nimport './_version.js';\r\nlet listenerAdded = false;\r\n/**\r\n * Add a `fetch` listener to the service worker that will\r\n * respond to\r\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\r\n * with precached assets.\r\n *\r\n * Requests for assets that aren't precached, the `FetchEvent` will not be\r\n * responded to, allowing the event to fall through to other `fetch` event\r\n * listeners.\r\n *\r\n * @param {Object} [options]\r\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\r\n * check cache entries for a URLs ending with '/' to see if there is a hit when\r\n * appending the `directoryIndex` value.\r\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\r\n * array of regex's to remove search params when looking for a cache match.\r\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\r\n * check the cache for the URL with a `.html` added to the end of the end.\r\n * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]\r\n * This is a function that should take a URL and return an array of\r\n * alternative URLs that should be checked for precache matches.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction addRoute(options) {\r\n    if (!listenerAdded) {\r\n        addFetchListener(options);\r\n        listenerAdded = true;\r\n    }\r\n}\r\nexport { addRoute };\r\n"]},"metadata":{},"sourceType":"module"}