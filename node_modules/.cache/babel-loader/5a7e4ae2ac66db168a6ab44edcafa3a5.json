{"ast":null,"code":"let UUID = require('ordered-uuid');\n\nimport success from '../../api-utils/success';\nimport error from '../../api-utils/error';\nimport showUserErrors from '../../api-utils/showUserErrors';\nexport default function add(data, keyProvided) {\n  // check for user errors\n  if (!data) {\n    this.userErrors.push('No data specified in add() method. You must use an object, e.g { id: 1, name: \"Bill\", age: 47 }');\n  } else if (!(typeof data == 'object' && data instanceof Array == false)) {\n    this.userErrors.push('Data passed to .add() must be an object. Not an array, string, number or boolean.');\n  } // no user errors, do the add\n\n\n  if (!this.userErrors.length) {\n    let collectionName = this.collectionName;\n    return new Promise((resolve, reject) => {\n      let key = null; // if no key provided, generate random, ordered key\n\n      if (!keyProvided) {\n        key = UUID.generate();\n      } else {\n        key = keyProvided;\n      }\n\n      return this.lf[collectionName].setItem(key, data).then(() => {\n        resolve(success.call(this, `Document added to \"${collectionName}\" collection:`, {\n          key,\n          data\n        }));\n      }).catch(err => {\n        reject(error.call(this, `Could not add Document to ${collectionName} collection.`));\n      });\n    });\n  } else {\n    showUserErrors.call(this);\n  }\n}","map":{"version":3,"sources":["C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/localbase/localbase/api/actions/add.js"],"names":["UUID","require","success","error","showUserErrors","add","data","keyProvided","userErrors","push","Array","length","collectionName","Promise","resolve","reject","key","generate","lf","setItem","then","call","catch","err"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAAlB;;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AAEA,eAAe,SAASC,GAAT,CAAaC,IAAb,EAAmBC,WAAnB,EAAgC;AAC7C;AACA,MAAI,CAACD,IAAL,EAAW;AACT,SAAKE,UAAL,CAAgBC,IAAhB,CAAqB,iGAArB;AACD,GAFD,MAGK,IAAI,EAAE,OAAOH,IAAP,IAAe,QAAf,IAA2BA,IAAI,YAAYI,KAAhB,IAAyB,KAAtD,CAAJ,EAAkE;AACrE,SAAKF,UAAL,CAAgBC,IAAhB,CAAqB,mFAArB;AACD,GAP4C,CAS7C;;;AACA,MAAI,CAAC,KAAKD,UAAL,CAAgBG,MAArB,EAA6B;AAC3B,QAAIC,cAAc,GAAG,KAAKA,cAA1B;AAEA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIC,GAAG,GAAG,IAAV,CADsC,CAGtC;;AACA,UAAI,CAACT,WAAL,EAAkB;AAChBS,QAAAA,GAAG,GAAGhB,IAAI,CAACiB,QAAL,EAAN;AACD,OAFD,MAGK;AACHD,QAAAA,GAAG,GAAGT,WAAN;AACD;;AAED,aAAO,KAAKW,EAAL,CAAQN,cAAR,EAAwBO,OAAxB,CAAgCH,GAAhC,EAAqCV,IAArC,EAA2Cc,IAA3C,CAAgD,MAAM;AAC3DN,QAAAA,OAAO,CACLZ,OAAO,CAACmB,IAAR,CACE,IADF,EAEG,sBAAsBT,cAAgB,eAFzC,EAGE;AAAEI,UAAAA,GAAF;AAAOV,UAAAA;AAAP,SAHF,CADK,CAAP;AAOD,OARM,EAQJgB,KARI,CAQEC,GAAG,IAAI;AACdR,QAAAA,MAAM,CACJZ,KAAK,CAACkB,IAAN,CACE,IADF,EAEG,6BAA6BT,cAAgB,cAFhD,CADI,CAAN;AAMD,OAfM,CAAP;AAgBD,KA3BM,CAAP;AA4BD,GA/BD,MAgCK;AACHR,IAAAA,cAAc,CAACiB,IAAf,CAAoB,IAApB;AACD;AACF","sourcesContent":["let UUID = require('ordered-uuid')\r\nimport success from '../../api-utils/success'\r\nimport error from '../../api-utils/error'\r\nimport showUserErrors from '../../api-utils/showUserErrors'\r\n\r\nexport default function add(data, keyProvided) {\r\n  // check for user errors\r\n  if (!data) {\r\n    this.userErrors.push('No data specified in add() method. You must use an object, e.g { id: 1, name: \"Bill\", age: 47 }')\r\n  }\r\n  else if (!(typeof data == 'object' && data instanceof Array == false)) {\r\n    this.userErrors.push('Data passed to .add() must be an object. Not an array, string, number or boolean.')\r\n  }\r\n\r\n  // no user errors, do the add\r\n  if (!this.userErrors.length) {\r\n    let collectionName = this.collectionName\r\n  \r\n    return new Promise((resolve, reject) => {\r\n      let key = null\r\n\r\n      // if no key provided, generate random, ordered key\r\n      if (!keyProvided) {\r\n        key = UUID.generate()\r\n      }\r\n      else {\r\n        key = keyProvided\r\n      }\r\n\r\n      return this.lf[collectionName].setItem(key, data).then(() => {\r\n        resolve(\r\n          success.call(\r\n            this,\r\n            `Document added to \"${ collectionName }\" collection:`,\r\n            { key, data }\r\n          )\r\n        )\r\n      }).catch(err => {\r\n        reject(\r\n          error.call(\r\n            this,\r\n            `Could not add Document to ${ collectionName } collection.`\r\n          )\r\n        )\r\n      })\r\n    })\r\n  }\r\n  else {\r\n    showUserErrors.call(this)\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}