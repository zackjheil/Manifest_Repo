{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\r\n * An implementation of a\r\n * [network-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-only}\r\n * request strategy.\r\n *\r\n * This class is useful if you want to take advantage of any\r\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\r\n *\r\n * If the network request fails, this will throw a `WorkboxError` exception.\r\n *\r\n * @memberof module:workbox-strategies\r\n */\n\nvar NetworkOnly = /*#__PURE__*/function () {\n  /**\r\n   * @param {Object} options\r\n   * @param {string} options.cacheName Cache name to store and retrieve\r\n   * requests. Defaults to cache names provided by\r\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\r\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\r\n   * to use in conjunction with this caching strategy.\r\n   * @param {Object} options.fetchOptions Values passed along to the\r\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\r\n   * of all fetch() requests made by this strategy.\r\n   */\n  function NetworkOnly() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, NetworkOnly);\n\n    this._plugins = options.plugins || [];\n    this._fetchOptions = options.fetchOptions;\n  }\n  /**\r\n   * This method will perform a request strategy and follows an API that\r\n   * will work with the\r\n   * [Workbox Router]{@link module:workbox-routing.Router}.\r\n   *\r\n   * @param {Object} options\r\n   * @param {Request|string} options.request The request to run this strategy for.\r\n   * @param {Event} [options.event] The event that triggered the request.\r\n   * @return {Promise<Response>}\r\n   */\n\n\n  _createClass(NetworkOnly, [{\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var event, request, error, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event = _ref.event, request = _ref.request;\n\n                if (typeof request === 'string') {\n                  request = new Request(request);\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  assert.isInstance(request, Request, {\n                    moduleName: 'workbox-strategies',\n                    className: 'NetworkOnly',\n                    funcName: 'handle',\n                    paramName: 'request'\n                  });\n                }\n\n                _context.prev = 3;\n                _context.next = 6;\n                return fetchWrapper.fetch({\n                  request: request,\n                  event: event,\n                  fetchOptions: this._fetchOptions,\n                  plugins: this._plugins\n                });\n\n              case 6:\n                response = _context.sent;\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](3);\n                error = _context.t0;\n\n              case 12:\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.groupCollapsed(messages.strategyStart('NetworkOnly', request));\n\n                  if (response) {\n                    logger.log(\"Got response from network.\");\n                  } else {\n                    logger.log(\"Unable to get a response from the network.\");\n                  }\n\n                  messages.printFinalResponse(response);\n                  logger.groupEnd();\n                }\n\n                if (response) {\n                  _context.next = 15;\n                  break;\n                }\n\n                throw new WorkboxError('no-response', {\n                  url: request.url,\n                  error: error\n                });\n\n              case 15:\n                return _context.abrupt(\"return\", response);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 9]]);\n      }));\n\n      function handle(_x) {\n        return _handle.apply(this, arguments);\n      }\n\n      return handle;\n    }()\n  }]);\n\n  return NetworkOnly;\n}();\n\nexport { NetworkOnly };","map":{"version":3,"sources":["C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/workbox-strategies/NetworkOnly.js"],"names":["assert","fetchWrapper","logger","WorkboxError","messages","NetworkOnly","options","_plugins","plugins","_fetchOptions","fetchOptions","event","request","Request","process","env","NODE_ENV","isInstance","moduleName","className","funcName","paramName","fetch","response","error","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,iCAAvB;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,W;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,yBAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACtB,SAAKC,QAAL,GAAgBD,OAAO,CAACE,OAAR,IAAmB,EAAnC;AACA,SAAKC,aAAL,GAAqBH,OAAO,CAACI,YAA7B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;6EACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAeC,gBAAAA,KAAf,QAAeA,KAAf,EAAsBC,OAAtB,QAAsBA,OAAtB;;AACI,oBAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC7BA,kBAAAA,OAAO,GAAG,IAAIC,OAAJ,CAAYD,OAAZ,CAAV;AACH;;AACD,oBAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvChB,kBAAAA,MAAM,CAACiB,UAAP,CAAkBL,OAAlB,EAA2BC,OAA3B,EAAoC;AAChCK,oBAAAA,UAAU,EAAE,oBADoB;AAEhCC,oBAAAA,SAAS,EAAE,aAFqB;AAGhCC,oBAAAA,QAAQ,EAAE,QAHsB;AAIhCC,oBAAAA,SAAS,EAAE;AAJqB,mBAApC;AAMH;;AAXL;AAAA;AAAA,uBAeyBpB,YAAY,CAACqB,KAAb,CAAmB;AAChCV,kBAAAA,OAAO,EAAPA,OADgC;AAEhCD,kBAAAA,KAAK,EAALA,KAFgC;AAGhCD,kBAAAA,YAAY,EAAE,KAAKD,aAHa;AAIhCD,kBAAAA,OAAO,EAAE,KAAKD;AAJkB,iBAAnB,CAfzB;;AAAA;AAeQgB,gBAAAA,QAfR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuBQC,gBAAAA,KAAK,cAAL;;AAvBR;AAyBI,oBAAIV,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCd,kBAAAA,MAAM,CAACuB,cAAP,CAAsBrB,QAAQ,CAACsB,aAAT,CAAuB,aAAvB,EAAsCd,OAAtC,CAAtB;;AACA,sBAAIW,QAAJ,EAAc;AACVrB,oBAAAA,MAAM,CAACyB,GAAP;AACH,mBAFD,MAGK;AACDzB,oBAAAA,MAAM,CAACyB,GAAP;AACH;;AACDvB,kBAAAA,QAAQ,CAACwB,kBAAT,CAA4BL,QAA5B;AACArB,kBAAAA,MAAM,CAAC2B,QAAP;AACH;;AAnCL,oBAoCSN,QApCT;AAAA;AAAA;AAAA;;AAAA,sBAqCc,IAAIpB,YAAJ,CAAiB,aAAjB,EAAgC;AAAE2B,kBAAAA,GAAG,EAAElB,OAAO,CAACkB,GAAf;AAAoBN,kBAAAA,KAAK,EAALA;AAApB,iBAAhC,CArCd;;AAAA;AAAA,iDAuCWD,QAvCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AA0CJ,SAASlB,WAAT","sourcesContent":["/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { messages } from './utils/messages.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a\r\n * [network-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-only}\r\n * request strategy.\r\n *\r\n * This class is useful if you want to take advantage of any\r\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\r\n *\r\n * If the network request fails, this will throw a `WorkboxError` exception.\r\n *\r\n * @memberof module:workbox-strategies\r\n */\r\nclass NetworkOnly {\r\n    /**\r\n     * @param {Object} options\r\n     * @param {string} options.cacheName Cache name to store and retrieve\r\n     * requests. Defaults to cache names provided by\r\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\r\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\r\n     * to use in conjunction with this caching strategy.\r\n     * @param {Object} options.fetchOptions Values passed along to the\r\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\r\n     * of all fetch() requests made by this strategy.\r\n     */\r\n    constructor(options = {}) {\r\n        this._plugins = options.plugins || [];\r\n        this._fetchOptions = options.fetchOptions;\r\n    }\r\n    /**\r\n     * This method will perform a request strategy and follows an API that\r\n     * will work with the\r\n     * [Workbox Router]{@link module:workbox-routing.Router}.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Request|string} options.request The request to run this strategy for.\r\n     * @param {Event} [options.event] The event that triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async handle({ event, request }) {\r\n        if (typeof request === 'string') {\r\n            request = new Request(request);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-strategies',\r\n                className: 'NetworkOnly',\r\n                funcName: 'handle',\r\n                paramName: 'request',\r\n            });\r\n        }\r\n        let error;\r\n        let response;\r\n        try {\r\n            response = await fetchWrapper.fetch({\r\n                request,\r\n                event,\r\n                fetchOptions: this._fetchOptions,\r\n                plugins: this._plugins,\r\n            });\r\n        }\r\n        catch (err) {\r\n            error = err;\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.groupCollapsed(messages.strategyStart('NetworkOnly', request));\r\n            if (response) {\r\n                logger.log(`Got response from network.`);\r\n            }\r\n            else {\r\n                logger.log(`Unable to get a response from the network.`);\r\n            }\r\n            messages.printFinalResponse(response);\r\n            logger.groupEnd();\r\n        }\r\n        if (!response) {\r\n            throw new WorkboxError('no-response', { url: request.url, error });\r\n        }\r\n        return response;\r\n    }\r\n}\r\nexport { NetworkOnly };\r\n"]},"metadata":{},"sourceType":"module"}