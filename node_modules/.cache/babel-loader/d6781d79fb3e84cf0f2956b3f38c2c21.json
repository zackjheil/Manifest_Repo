{"ast":null,"code":"import _classCallCheck from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\r\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\r\n * The \"match\" callback determine if a route should be used to \"handle\" a\r\n * request by returning a non-falsy value if it can. The \"handler\" callback\r\n * is called when there is a match and should return a Promise that resolves\r\n * to a `Response`.\r\n *\r\n * @memberof module:workbox-routing\r\n */\n\nvar Route =\n/**\r\n * Constructor for Route class.\r\n *\r\n * @param {module:workbox-routing~matchCallback} match\r\n * A callback function that determines whether the route matches a given\r\n * `fetch` event by returning a non-falsy value.\r\n * @param {module:workbox-routing~handlerCallback} handler A callback\r\n * function that returns a Promise resolving to a Response.\r\n * @param {string} [method='GET'] The HTTP method to match the Route\r\n * against.\r\n */\nfunction Route(match, handler) {\n  var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultMethod;\n\n  _classCallCheck(this, Route);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isType(match, 'function', {\n      moduleName: 'workbox-routing',\n      className: 'Route',\n      funcName: 'constructor',\n      paramName: 'match'\n    });\n\n    if (method) {\n      assert.isOneOf(method, validMethods, {\n        paramName: 'method'\n      });\n    }\n  } // These values are referenced directly by Router so cannot be\n  // altered by minificaton.\n\n\n  this.handler = normalizeHandler(handler);\n  this.match = match;\n  this.method = method;\n};\n\nexport { Route };","map":{"version":3,"sources":["C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/workbox-routing/Route.js"],"names":["assert","defaultMethod","validMethods","normalizeHandler","Route","match","handler","method","process","env","NODE_ENV","isType","moduleName","className","funcName","paramName","isOneOf"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,iCAAvB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,sBAA5C;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,K;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,eAAYC,KAAZ,EAAmBC,OAAnB,EAAoD;AAAA,MAAxBC,MAAwB,uEAAfN,aAAe;;AAAA;;AAChD,MAAIO,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCV,IAAAA,MAAM,CAACW,MAAP,CAAcN,KAAd,EAAqB,UAArB,EAAiC;AAC7BO,MAAAA,UAAU,EAAE,iBADiB;AAE7BC,MAAAA,SAAS,EAAE,OAFkB;AAG7BC,MAAAA,QAAQ,EAAE,aAHmB;AAI7BC,MAAAA,SAAS,EAAE;AAJkB,KAAjC;;AAMA,QAAIR,MAAJ,EAAY;AACRP,MAAAA,MAAM,CAACgB,OAAP,CAAeT,MAAf,EAAuBL,YAAvB,EAAqC;AAAEa,QAAAA,SAAS,EAAE;AAAb,OAArC;AACH;AACJ,GAX+C,CAYhD;AACA;;;AACA,OAAKT,OAAL,GAAeH,gBAAgB,CAACG,OAAD,CAA/B;AACA,OAAKD,KAAL,GAAaA,KAAb;AACA,OAAKE,MAAL,GAAcA,MAAd;AACH,C;;AAEL,SAASH,KAAT","sourcesContent":["/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { defaultMethod, validMethods } from './utils/constants.js';\r\nimport { normalizeHandler } from './utils/normalizeHandler.js';\r\nimport './_version.js';\r\n/**\r\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\r\n * The \"match\" callback determine if a route should be used to \"handle\" a\r\n * request by returning a non-falsy value if it can. The \"handler\" callback\r\n * is called when there is a match and should return a Promise that resolves\r\n * to a `Response`.\r\n *\r\n * @memberof module:workbox-routing\r\n */\r\nclass Route {\r\n    /**\r\n     * Constructor for Route class.\r\n     *\r\n     * @param {module:workbox-routing~matchCallback} match\r\n     * A callback function that determines whether the route matches a given\r\n     * `fetch` event by returning a non-falsy value.\r\n     * @param {module:workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resolving to a Response.\r\n     * @param {string} [method='GET'] The HTTP method to match the Route\r\n     * against.\r\n     */\r\n    constructor(match, handler, method = defaultMethod) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(match, 'function', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Route',\r\n                funcName: 'constructor',\r\n                paramName: 'match',\r\n            });\r\n            if (method) {\r\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\r\n            }\r\n        }\r\n        // These values are referenced directly by Router so cannot be\r\n        // altered by minificaton.\r\n        this.handler = normalizeHandler(handler);\r\n        this.match = match;\r\n        this.method = method;\r\n    }\r\n}\r\nexport { Route };\r\n"]},"metadata":{},"sourceType":"module"}