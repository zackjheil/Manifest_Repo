{"ast":null,"code":"import logger from '../../utils/logger';\nimport isSubset from '../../utils/isSubset';\nimport success from '../../api-utils/success';\nimport error from '../../api-utils/error';\nimport showUserErrors from '../../api-utils/showUserErrors';\nimport selectionLevel from '../../api-utils/selectionLevel';\nexport default function set(newDocument) {\n  var _this = this;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    keys: false\n  };\n  var collectionName = this.collectionName;\n  var docSelectionCriteria = this.docSelectionCriteria;\n  var currentSelectionLevel = selectionLevel.call(this);\n  return new Promise(function (resolve, reject) {\n    // set collection\n    _this.setCollection = function () {\n      _this.lf[collectionName].clear().then(function () {\n        if (!options.keys) {\n          newDocument.forEach(function (doc) {\n            _this.add(doc);\n          });\n          resolve(success.call(_this, \"Collection \\\"\".concat(collectionName, \"\\\" set with \").concat(newDocument.length, \" Documents\"), newDocument));\n        } else {\n          console.log('keys provided'); // check that every document in array has a _key property\n\n          var docsWithoutKey = 0;\n          newDocument.forEach(function (doc) {\n            if (!doc.hasOwnProperty('_key')) {\n              docsWithoutKey++;\n            }\n          });\n\n          if (docsWithoutKey) {\n            reject(error.call(_this, \"Documents provided to .set() in an array must each have a _key property set to a string.\"));\n          } else {\n            newDocument.forEach(function (doc) {\n              var key = doc._key;\n              delete doc._key;\n\n              _this.add(doc, key);\n            });\n            resolve(success.call(_this, \"Collection \\\"\".concat(collectionName, \"\\\" set with \").concat(newDocument.length, \" Documents\"), newDocument));\n          }\n        }\n      }).catch(function (err) {\n        reject(error.call(_this, \"Could not set \".concat(collectionName, \" Collection with data \").concat(JSON.stringify(newDocument), \".\")));\n      });\n    }; // set document\n\n\n    _this.setDocument = function () {\n      // set document by criteria\n      _this.setDocumentByCriteria = function () {\n        var docsToSet = [];\n\n        _this.lf[collectionName].iterate(function (value, key) {\n          if (isSubset(value, docSelectionCriteria)) {\n            docsToSet.push({\n              key: key,\n              newDocument: newDocument\n            });\n          }\n        }).then(function () {\n          if (!docsToSet.length) {\n            reject(error.call(_this, \"No Documents found in \".concat(collectionName, \" Collection with criteria \").concat(JSON.stringify(docSelectionCriteria), \".\")));\n          }\n\n          if (docsToSet.length > 1) {\n            logger.warn.call(_this, \"Multiple documents (\".concat(docsToSet.length, \") with \").concat(JSON.stringify(docSelectionCriteria), \" found for setting.\"));\n          }\n        }).then(function () {\n          docsToSet.forEach(function (docToSet, index) {\n            _this.lf[collectionName].setItem(docToSet.key, docToSet.newDocument).then(function (value) {\n              if (index === docsToSet.length - 1) {\n                resolve(success.call(_this, \"\".concat(docsToSet.length, \" Document\").concat(docsToSet.length > 1 ? 's' : '', \" in \\\"\").concat(collectionName, \"\\\" collection with \").concat(JSON.stringify(docSelectionCriteria), \" set to:\"), newDocument));\n              }\n            }).catch(function (err) {\n              reject(error.call(_this, \"Could not set \".concat(docsToSet.length, \" Documents in \").concat(collectionName, \" Collection.\")));\n            });\n          });\n        });\n      }; // set document by key\n\n\n      _this.setDocumentByKey = function () {\n        _this.lf[collectionName].setItem(docSelectionCriteria, newDocument).then(function (value) {\n          resolve(success.call(_this, \"Document in \\\"\".concat(collectionName, \"\\\" collection with key \").concat(JSON.stringify(docSelectionCriteria), \" set to:\"), newDocument));\n        }).catch(function (err) {\n          reject(error.call(_this, \"Document in \\\"\".concat(collectionName, \"\\\" collection with key \").concat(JSON.stringify(docSelectionCriteria), \" could not be set.\")));\n        });\n      };\n\n      if (typeof docSelectionCriteria == 'object') {\n        return _this.setDocumentByCriteria();\n      } else {\n        return _this.setDocumentByKey();\n      }\n    }; // check for user errors\n\n\n    if (!newDocument) {\n      _this.userErrors.push('No new Document object provided to set() method. Use an object e.g. { id: 1, name: \"Bill\", age: 47 }');\n    } else if (currentSelectionLevel === 'doc') {\n      if (!(typeof newDocument == 'object' && newDocument instanceof Array == false)) {\n        _this.userErrors.push('Data passed to .set() must be an object. Not an array, string, number or boolean.');\n      }\n    } else if (currentSelectionLevel === 'collection') {\n      if (!(typeof newDocument == 'object' && newDocument instanceof Array == true)) {\n        _this.userErrors.push('Data passed to .set() must be an array of objects. Not an object, string, number or boolean.');\n      }\n    }\n\n    if (!_this.userErrors.length) {\n      if (currentSelectionLevel == 'collection') {\n        return _this.setCollection();\n      } else if (currentSelectionLevel == 'doc') {\n        return _this.setDocument();\n      }\n    } else {\n      showUserErrors.call(_this);\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/localbase/localbase/api/actions/set.js"],"names":["logger","isSubset","success","error","showUserErrors","selectionLevel","set","newDocument","options","keys","collectionName","docSelectionCriteria","currentSelectionLevel","call","Promise","resolve","reject","setCollection","lf","clear","then","forEach","doc","add","length","console","log","docsWithoutKey","hasOwnProperty","key","_key","catch","err","JSON","stringify","setDocument","setDocumentByCriteria","docsToSet","iterate","value","push","warn","docToSet","index","setItem","setDocumentByKey","userErrors","Array"],"mappings":"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","sourcesContent":["import logger from '../../utils/logger'\r\nimport isSubset from '../../utils/isSubset'\r\nimport success from '../../api-utils/success'\r\nimport error from '../../api-utils/error'\r\nimport showUserErrors from '../../api-utils/showUserErrors'\r\nimport selectionLevel from '../../api-utils/selectionLevel'\r\n\r\nexport default function set(newDocument, options = { keys: false }) {\r\n\r\n  let collectionName = this.collectionName\r\n  let docSelectionCriteria = this.docSelectionCriteria\r\n  let currentSelectionLevel = selectionLevel.call(this)\r\n\r\n  return new Promise((resolve, reject) => {\r\n\r\n    // set collection\r\n    this.setCollection = () => {\r\n      this.lf[collectionName].clear().then(() => {\r\n        if (!options.keys) {\r\n          newDocument.forEach(doc => {\r\n            this.add(doc)\r\n          })\r\n          resolve(\r\n            success.call(\r\n              this,\r\n              `Collection \"${ collectionName }\" set with ${ newDocument.length } Documents`, \r\n              newDocument\r\n            )\r\n          )\r\n        }\r\n        else {\r\n          console.log('keys provided')\r\n          // check that every document in array has a _key property\r\n          let docsWithoutKey = 0\r\n          newDocument.forEach(doc => {\r\n            if (!doc.hasOwnProperty('_key')) {\r\n              docsWithoutKey++\r\n            }\r\n          })\r\n          if (docsWithoutKey) {\r\n            reject(\r\n              error.call(\r\n                this,\r\n                `Documents provided to .set() in an array must each have a _key property set to a string.`\r\n              )\r\n            )\r\n          }\r\n          else {\r\n            newDocument.forEach(doc => {\r\n              let key = doc._key\r\n              delete doc._key\r\n              this.add(doc, key)\r\n            })\r\n            resolve(\r\n              success.call(\r\n                this,\r\n                `Collection \"${ collectionName }\" set with ${ newDocument.length } Documents`, \r\n                newDocument\r\n              )\r\n            )\r\n          }\r\n        }\r\n      }).catch(err => {\r\n        reject(\r\n          error.call(\r\n            this,\r\n            `Could not set ${ collectionName } Collection with data ${ JSON.stringify(newDocument) }.`\r\n          )\r\n        )\r\n      });\r\n    }\r\n\r\n    // set document\r\n    this.setDocument = () => {\r\n      \r\n      // set document by criteria\r\n      this.setDocumentByCriteria = () => {\r\n        let docsToSet = []\r\n        this.lf[collectionName].iterate((value, key) => {\r\n          if (isSubset(value, docSelectionCriteria)) {\r\n            docsToSet.push({ key, newDocument })\r\n          }\r\n        }).then(() => {\r\n          if (!docsToSet.length) {\r\n            reject(\r\n              error.call(\r\n                this,\r\n                `No Documents found in ${ collectionName } Collection with criteria ${ JSON.stringify(docSelectionCriteria) }.`\r\n              )\r\n            )\r\n          }\r\n          if (docsToSet.length > 1) {\r\n            logger.warn.call(this, `Multiple documents (${ docsToSet.length }) with ${ JSON.stringify(docSelectionCriteria) } found for setting.`)\r\n          }\r\n        }).then(() => {\r\n          docsToSet.forEach((docToSet, index) => {\r\n            this.lf[collectionName].setItem(docToSet.key, docToSet.newDocument).then(value => {\r\n  \r\n              if (index === (docsToSet.length - 1)) {\r\n                resolve(\r\n                  success.call(\r\n                    this,\r\n                    `${ docsToSet.length } Document${ docsToSet.length > 1 ? 's' : '' } in \"${ collectionName }\" collection with ${ JSON.stringify(docSelectionCriteria) } set to:`, \r\n                    newDocument\r\n                  )\r\n                )\r\n              }\r\n            }).catch(err => {\r\n              reject(\r\n                error.call(\r\n                  this,\r\n                  `Could not set ${ docsToSet.length } Documents in ${ collectionName } Collection.`\r\n                )\r\n              )\r\n            })\r\n          })\r\n        })\r\n      }\r\n  \r\n      // set document by key\r\n      this.setDocumentByKey = () => {\r\n        this.lf[collectionName].setItem(docSelectionCriteria, newDocument).then(value => {\r\n          resolve(\r\n            success.call(\r\n              this,\r\n              `Document in \"${ collectionName }\" collection with key ${ JSON.stringify(docSelectionCriteria) } set to:`,\r\n              newDocument\r\n            )\r\n          )\r\n        }).catch(err => {\r\n          reject(\r\n            error.call(\r\n              this,\r\n              `Document in \"${ collectionName }\" collection with key ${ JSON.stringify(docSelectionCriteria) } could not be set.`\r\n            )\r\n          )\r\n        })\r\n      }\r\n\r\n      if (typeof docSelectionCriteria == 'object') {\r\n        return this.setDocumentByCriteria()\r\n      }\r\n      else {\r\n        return this.setDocumentByKey()\r\n      }\r\n    }\r\n\r\n    // check for user errors\r\n    if (!newDocument) {\r\n      this.userErrors.push('No new Document object provided to set() method. Use an object e.g. { id: 1, name: \"Bill\", age: 47 }')\r\n    }\r\n    else if (currentSelectionLevel === 'doc') {\r\n      if (!(typeof newDocument == 'object' && newDocument instanceof Array == false)) {\r\n        this.userErrors.push('Data passed to .set() must be an object. Not an array, string, number or boolean.')\r\n      }\r\n    }\r\n    else if (currentSelectionLevel === 'collection') {\r\n      if (!(typeof newDocument == 'object' && newDocument instanceof Array == true)) {\r\n        this.userErrors.push('Data passed to .set() must be an array of objects. Not an object, string, number or boolean.')\r\n      }\r\n    }\r\n\r\n    if (!this.userErrors.length) {\r\n      if (currentSelectionLevel == 'collection') {\r\n        return this.setCollection()\r\n      }\r\n      else if (currentSelectionLevel == 'doc') {\r\n        return this.setDocument()\r\n      }\r\n    }\r\n    else {\r\n      showUserErrors.call(this)\r\n    }\r\n\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}