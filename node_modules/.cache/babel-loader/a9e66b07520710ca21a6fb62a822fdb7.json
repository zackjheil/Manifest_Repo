{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\nimport '../_version.js';\nvar DB_NAME = 'workbox-expiration';\nvar OBJECT_STORE_NAME = 'cache-entries';\n\nvar normalizeURL = function normalizeURL(unNormalizedUrl) {\n  var url = new URL(unNormalizedUrl, location.href);\n  url.hash = '';\n  return url.href;\n};\n/**\r\n * Returns the timestamp model.\r\n *\r\n * @private\r\n */\n\n\nvar CacheTimestampsModel = /*#__PURE__*/function () {\n  /**\r\n   *\r\n   * @param {string} cacheName\r\n   *\r\n   * @private\r\n   */\n  function CacheTimestampsModel(cacheName) {\n    var _this = this;\n\n    _classCallCheck(this, CacheTimestampsModel);\n\n    this._cacheName = cacheName;\n    this._db = new DBWrapper(DB_NAME, 1, {\n      onupgradeneeded: function onupgradeneeded(event) {\n        return _this._handleUpgrade(event);\n      }\n    });\n  }\n  /**\r\n   * Should perform an upgrade of indexedDB.\r\n   *\r\n   * @param {Event} event\r\n   *\r\n   * @private\r\n   */\n\n\n  _createClass(CacheTimestampsModel, [{\n    key: \"_handleUpgrade\",\n    value: function _handleUpgrade(event) {\n      var db = event.target.result; // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n      // have to use the `id` keyPath here and create our own values (a\n      // concatenation of `url + cacheName`) instead of simply using\n      // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n\n      var objStore = db.createObjectStore(OBJECT_STORE_NAME, {\n        keyPath: 'id'\n      }); // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n      // create a single index with the keyPath `['cacheName', 'timestamp']`\n      // instead of doing both these indexes.\n\n      objStore.createIndex('cacheName', 'cacheName', {\n        unique: false\n      });\n      objStore.createIndex('timestamp', 'timestamp', {\n        unique: false\n      }); // Previous versions of `workbox-expiration` used `this._cacheName`\n      // as the IDBDatabase name.\n\n      deleteDatabase(this._cacheName);\n    }\n    /**\r\n     * @param {string} url\r\n     * @param {number} timestamp\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"setTimestamp\",\n    value: function () {\n      var _setTimestamp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, timestamp) {\n        var entry;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = normalizeURL(url);\n                entry = {\n                  url: url,\n                  timestamp: timestamp,\n                  cacheName: this._cacheName,\n                  // Creating an ID from the URL and cache name won't be necessary once\n                  // Edge switches to Chromium and all browsers we support work with\n                  // array keyPaths.\n                  id: this._getId(url)\n                };\n                _context.next = 4;\n                return this._db.put(OBJECT_STORE_NAME, entry);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setTimestamp(_x, _x2) {\n        return _setTimestamp.apply(this, arguments);\n      }\n\n      return setTimestamp;\n    }()\n    /**\r\n     * Returns the timestamp stored for a given URL.\r\n     *\r\n     * @param {string} url\r\n     * @return {number}\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"getTimestamp\",\n    value: function () {\n      var _getTimestamp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n        var entry;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._db.get(OBJECT_STORE_NAME, this._getId(url));\n\n              case 2:\n                entry = _context2.sent;\n                return _context2.abrupt(\"return\", entry.timestamp);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getTimestamp(_x3) {\n        return _getTimestamp.apply(this, arguments);\n      }\n\n      return getTimestamp;\n    }()\n    /**\r\n     * Iterates through all the entries in the object store (from newest to\r\n     * oldest) and removes entries once either `maxCount` is reached or the\r\n     * entry's timestamp is less than `minTimestamp`.\r\n     *\r\n     * @param {number} minTimestamp\r\n     * @param {number} maxCount\r\n     * @return {Array<string>}\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"expireEntries\",\n    value: function () {\n      var _expireEntries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(minTimestamp, maxCount) {\n        var _this2 = this;\n\n        var entriesToDelete, urlsDeleted, _iterator, _step, entry;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._db.transaction(OBJECT_STORE_NAME, 'readwrite', function (txn, done) {\n                  var store = txn.objectStore(OBJECT_STORE_NAME);\n                  var request = store.index('timestamp').openCursor(null, 'prev');\n                  var entriesToDelete = [];\n                  var entriesNotDeletedCount = 0;\n\n                  request.onsuccess = function () {\n                    var cursor = request.result;\n\n                    if (cursor) {\n                      var result = cursor.value; // TODO(philipwalton): once we can use a multi-key index, we\n                      // won't have to check `cacheName` here.\n\n                      if (result.cacheName === _this2._cacheName) {\n                        // Delete an entry if it's older than the max age or\n                        // if we already have the max number allowed.\n                        if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) {\n                          // TODO(philipwalton): we should be able to delete the\n                          // entry right here, but doing so causes an iteration\n                          // bug in Safari stable (fixed in TP). Instead we can\n                          // store the keys of the entries to delete, and then\n                          // delete the separate transactions.\n                          // https://github.com/GoogleChrome/workbox/issues/1978\n                          // cursor.delete();\n                          // We only need to return the URL, not the whole entry.\n                          entriesToDelete.push(cursor.value);\n                        } else {\n                          entriesNotDeletedCount++;\n                        }\n                      }\n\n                      cursor.continue();\n                    } else {\n                      done(entriesToDelete);\n                    }\n                  };\n                });\n\n              case 2:\n                entriesToDelete = _context3.sent;\n                // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n                // we should be able to remove this loop and do the entry deletion in the\n                // cursor loop above:\n                // https://github.com/GoogleChrome/workbox/issues/1978\n                urlsDeleted = [];\n                _iterator = _createForOfIteratorHelper(entriesToDelete);\n                _context3.prev = 5;\n\n                _iterator.s();\n\n              case 7:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                entry = _step.value;\n                _context3.next = 11;\n                return this._db.delete(OBJECT_STORE_NAME, entry.id);\n\n              case 11:\n                urlsDeleted.push(entry.url);\n\n              case 12:\n                _context3.next = 7;\n                break;\n\n              case 14:\n                _context3.next = 19;\n                break;\n\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](5);\n\n                _iterator.e(_context3.t0);\n\n              case 19:\n                _context3.prev = 19;\n\n                _iterator.f();\n\n                return _context3.finish(19);\n\n              case 22:\n                return _context3.abrupt(\"return\", urlsDeleted);\n\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 16, 19, 22]]);\n      }));\n\n      function expireEntries(_x4, _x5) {\n        return _expireEntries.apply(this, arguments);\n      }\n\n      return expireEntries;\n    }()\n    /**\r\n     * Takes a URL and returns an ID that will be unique in the object store.\r\n     *\r\n     * @param {string} url\r\n     * @return {string}\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_getId\",\n    value: function _getId(url) {\n      // Creating an ID from the URL and cache name won't be necessary once\n      // Edge switches to Chromium and all browsers we support work with\n      // array keyPaths.\n      return this._cacheName + '|' + normalizeURL(url);\n    }\n  }]);\n\n  return CacheTimestampsModel;\n}();\n\nexport { CacheTimestampsModel };","map":{"version":3,"sources":["C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/workbox-expiration/models/CacheTimestampsModel.js"],"names":["DBWrapper","deleteDatabase","DB_NAME","OBJECT_STORE_NAME","normalizeURL","unNormalizedUrl","url","URL","location","href","hash","CacheTimestampsModel","cacheName","_cacheName","_db","onupgradeneeded","event","_handleUpgrade","db","target","result","objStore","createObjectStore","keyPath","createIndex","unique","timestamp","entry","id","_getId","put","get","minTimestamp","maxCount","transaction","txn","done","store","objectStore","request","index","openCursor","entriesToDelete","entriesNotDeletedCount","onsuccess","cursor","value","push","continue","urlsDeleted","delete"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,oCAA1B;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,OAAO,gBAAP;AACA,IAAMC,OAAO,GAAG,oBAAhB;AACA,IAAMC,iBAAiB,GAAG,eAA1B;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,eAAD,EAAqB;AACtC,MAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQF,eAAR,EAAyBG,QAAQ,CAACC,IAAlC,CAAZ;AACAH,EAAAA,GAAG,CAACI,IAAJ,GAAW,EAAX;AACA,SAAOJ,GAAG,CAACG,IAAX;AACH,CAJD;AAKA;AACA;AACA;AACA;AACA;;;IACME,oB;AACF;AACJ;AACA;AACA;AACA;AACA;AACI,gCAAYC,SAAZ,EAAuB;AAAA;;AAAA;;AACnB,SAAKC,UAAL,GAAkBD,SAAlB;AACA,SAAKE,GAAL,GAAW,IAAId,SAAJ,CAAcE,OAAd,EAAuB,CAAvB,EAA0B;AACjCa,MAAAA,eAAe,EAAE,yBAACC,KAAD;AAAA,eAAW,KAAI,CAACC,cAAL,CAAoBD,KAApB,CAAX;AAAA;AADgB,KAA1B,CAAX;AAGH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;WACI,wBAAeA,KAAf,EAAsB;AAClB,UAAME,EAAE,GAAGF,KAAK,CAACG,MAAN,CAAaC,MAAxB,CADkB,CAElB;AACA;AACA;AACA;;AACA,UAAMC,QAAQ,GAAGH,EAAE,CAACI,iBAAH,CAAqBnB,iBAArB,EAAwC;AAAEoB,QAAAA,OAAO,EAAE;AAAX,OAAxC,CAAjB,CANkB,CAOlB;AACA;AACA;;AACAF,MAAAA,QAAQ,CAACG,WAAT,CAAqB,WAArB,EAAkC,WAAlC,EAA+C;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAA/C;AACAJ,MAAAA,QAAQ,CAACG,WAAT,CAAqB,WAArB,EAAkC,WAAlC,EAA+C;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAA/C,EAXkB,CAYlB;AACA;;AACAxB,MAAAA,cAAc,CAAC,KAAKY,UAAN,CAAd;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;;mFACI,iBAAmBP,GAAnB,EAAwBoB,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACIpB,gBAAAA,GAAG,GAAGF,YAAY,CAACE,GAAD,CAAlB;AACMqB,gBAAAA,KAFV,GAEkB;AACVrB,kBAAAA,GAAG,EAAHA,GADU;AAEVoB,kBAAAA,SAAS,EAATA,SAFU;AAGVd,kBAAAA,SAAS,EAAE,KAAKC,UAHN;AAIV;AACA;AACA;AACAe,kBAAAA,EAAE,EAAE,KAAKC,MAAL,CAAYvB,GAAZ;AAPM,iBAFlB;AAAA;AAAA,uBAWU,KAAKQ,GAAL,CAASgB,GAAT,CAAa3B,iBAAb,EAAgCwB,KAAhC,CAXV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAaA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;;mFACI,kBAAmBrB,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACwB,KAAKQ,GAAL,CAASiB,GAAT,CAAa5B,iBAAb,EAAgC,KAAK0B,MAAL,CAAYvB,GAAZ,CAAhC,CADxB;;AAAA;AACUqB,gBAAAA,KADV;AAAA,kDAEWA,KAAK,CAACD,SAFjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;oFACI,kBAAoBM,YAApB,EAAkCC,QAAlC;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACkC,KAAKnB,GAAL,CAASoB,WAAT,CAAqB/B,iBAArB,EAAwC,WAAxC,EAAqD,UAACgC,GAAD,EAAMC,IAAN,EAAe;AAC9F,sBAAMC,KAAK,GAAGF,GAAG,CAACG,WAAJ,CAAgBnC,iBAAhB,CAAd;AACA,sBAAMoC,OAAO,GAAGF,KAAK,CAACG,KAAN,CAAY,WAAZ,EAAyBC,UAAzB,CAAoC,IAApC,EAA0C,MAA1C,CAAhB;AACA,sBAAMC,eAAe,GAAG,EAAxB;AACA,sBAAIC,sBAAsB,GAAG,CAA7B;;AACAJ,kBAAAA,OAAO,CAACK,SAAR,GAAoB,YAAM;AACtB,wBAAMC,MAAM,GAAGN,OAAO,CAACnB,MAAvB;;AACA,wBAAIyB,MAAJ,EAAY;AACR,0BAAMzB,MAAM,GAAGyB,MAAM,CAACC,KAAtB,CADQ,CAER;AACA;;AACA,0BAAI1B,MAAM,CAACR,SAAP,KAAqB,MAAI,CAACC,UAA9B,EAA0C;AACtC;AACA;AACA,4BAAKmB,YAAY,IAAIZ,MAAM,CAACM,SAAP,GAAmBM,YAApC,IACCC,QAAQ,IAAIU,sBAAsB,IAAIV,QAD3C,EACsD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAS,0BAAAA,eAAe,CAACK,IAAhB,CAAqBF,MAAM,CAACC,KAA5B;AACH,yBAXD,MAYK;AACDH,0BAAAA,sBAAsB;AACzB;AACJ;;AACDE,sBAAAA,MAAM,CAACG,QAAP;AACH,qBAxBD,MAyBK;AACDZ,sBAAAA,IAAI,CAACM,eAAD,CAAJ;AACH;AACJ,mBA9BD;AA+BH,iBApC6B,CADlC;;AAAA;AACUA,gBAAAA,eADV;AAsCI;AACA;AACA;AACA;AACMO,gBAAAA,WA1CV,GA0CwB,EA1CxB;AAAA,uDA2CwBP,eA3CxB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2Cef,gBAAAA,KA3Cf;AAAA;AAAA,uBA4Cc,KAAKb,GAAL,CAASoC,MAAT,CAAgB/C,iBAAhB,EAAmCwB,KAAK,CAACC,EAAzC,CA5Cd;;AAAA;AA6CQqB,gBAAAA,WAAW,CAACF,IAAZ,CAAiBpB,KAAK,CAACrB,GAAvB;;AA7CR;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA,kDA+CW2C,WA/CX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAiDA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,gBAAO3C,GAAP,EAAY;AACR;AACA;AACA;AACA,aAAO,KAAKO,UAAL,GAAkB,GAAlB,GAAwBT,YAAY,CAACE,GAAD,CAA3C;AACH;;;;;;AAEL,SAASK,oBAAT","sourcesContent":["/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\r\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\r\nimport '../_version.js';\r\nconst DB_NAME = 'workbox-expiration';\r\nconst OBJECT_STORE_NAME = 'cache-entries';\r\nconst normalizeURL = (unNormalizedUrl) => {\r\n    const url = new URL(unNormalizedUrl, location.href);\r\n    url.hash = '';\r\n    return url.href;\r\n};\r\n/**\r\n * Returns the timestamp model.\r\n *\r\n * @private\r\n */\r\nclass CacheTimestampsModel {\r\n    /**\r\n     *\r\n     * @param {string} cacheName\r\n     *\r\n     * @private\r\n     */\r\n    constructor(cacheName) {\r\n        this._cacheName = cacheName;\r\n        this._db = new DBWrapper(DB_NAME, 1, {\r\n            onupgradeneeded: (event) => this._handleUpgrade(event),\r\n        });\r\n    }\r\n    /**\r\n     * Should perform an upgrade of indexedDB.\r\n     *\r\n     * @param {Event} event\r\n     *\r\n     * @private\r\n     */\r\n    _handleUpgrade(event) {\r\n        const db = event.target.result;\r\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\r\n        // have to use the `id` keyPath here and create our own values (a\r\n        // concatenation of `url + cacheName`) instead of simply using\r\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\r\n        const objStore = db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\r\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\r\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\r\n        // instead of doing both these indexes.\r\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\r\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n        // Previous versions of `workbox-expiration` used `this._cacheName`\r\n        // as the IDBDatabase name.\r\n        deleteDatabase(this._cacheName);\r\n    }\r\n    /**\r\n     * @param {string} url\r\n     * @param {number} timestamp\r\n     *\r\n     * @private\r\n     */\r\n    async setTimestamp(url, timestamp) {\r\n        url = normalizeURL(url);\r\n        const entry = {\r\n            url,\r\n            timestamp,\r\n            cacheName: this._cacheName,\r\n            // Creating an ID from the URL and cache name won't be necessary once\r\n            // Edge switches to Chromium and all browsers we support work with\r\n            // array keyPaths.\r\n            id: this._getId(url),\r\n        };\r\n        await this._db.put(OBJECT_STORE_NAME, entry);\r\n    }\r\n    /**\r\n     * Returns the timestamp stored for a given URL.\r\n     *\r\n     * @param {string} url\r\n     * @return {number}\r\n     *\r\n     * @private\r\n     */\r\n    async getTimestamp(url) {\r\n        const entry = await this._db.get(OBJECT_STORE_NAME, this._getId(url));\r\n        return entry.timestamp;\r\n    }\r\n    /**\r\n     * Iterates through all the entries in the object store (from newest to\r\n     * oldest) and removes entries once either `maxCount` is reached or the\r\n     * entry's timestamp is less than `minTimestamp`.\r\n     *\r\n     * @param {number} minTimestamp\r\n     * @param {number} maxCount\r\n     * @return {Array<string>}\r\n     *\r\n     * @private\r\n     */\r\n    async expireEntries(minTimestamp, maxCount) {\r\n        const entriesToDelete = await this._db.transaction(OBJECT_STORE_NAME, 'readwrite', (txn, done) => {\r\n            const store = txn.objectStore(OBJECT_STORE_NAME);\r\n            const request = store.index('timestamp').openCursor(null, 'prev');\r\n            const entriesToDelete = [];\r\n            let entriesNotDeletedCount = 0;\r\n            request.onsuccess = () => {\r\n                const cursor = request.result;\r\n                if (cursor) {\r\n                    const result = cursor.value;\r\n                    // TODO(philipwalton): once we can use a multi-key index, we\r\n                    // won't have to check `cacheName` here.\r\n                    if (result.cacheName === this._cacheName) {\r\n                        // Delete an entry if it's older than the max age or\r\n                        // if we already have the max number allowed.\r\n                        if ((minTimestamp && result.timestamp < minTimestamp) ||\r\n                            (maxCount && entriesNotDeletedCount >= maxCount)) {\r\n                            // TODO(philipwalton): we should be able to delete the\r\n                            // entry right here, but doing so causes an iteration\r\n                            // bug in Safari stable (fixed in TP). Instead we can\r\n                            // store the keys of the entries to delete, and then\r\n                            // delete the separate transactions.\r\n                            // https://github.com/GoogleChrome/workbox/issues/1978\r\n                            // cursor.delete();\r\n                            // We only need to return the URL, not the whole entry.\r\n                            entriesToDelete.push(cursor.value);\r\n                        }\r\n                        else {\r\n                            entriesNotDeletedCount++;\r\n                        }\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    done(entriesToDelete);\r\n                }\r\n            };\r\n        });\r\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\r\n        // we should be able to remove this loop and do the entry deletion in the\r\n        // cursor loop above:\r\n        // https://github.com/GoogleChrome/workbox/issues/1978\r\n        const urlsDeleted = [];\r\n        for (const entry of entriesToDelete) {\r\n            await this._db.delete(OBJECT_STORE_NAME, entry.id);\r\n            urlsDeleted.push(entry.url);\r\n        }\r\n        return urlsDeleted;\r\n    }\r\n    /**\r\n     * Takes a URL and returns an ID that will be unique in the object store.\r\n     *\r\n     * @param {string} url\r\n     * @return {string}\r\n     *\r\n     * @private\r\n     */\r\n    _getId(url) {\r\n        // Creating an ID from the URL and cache name won't be necessary once\r\n        // Edge switches to Chromium and all browsers we support work with\r\n        // array keyPaths.\r\n        return this._cacheName + '|' + normalizeURL(url);\r\n    }\r\n}\r\nexport { CacheTimestampsModel };\r\n"]},"metadata":{},"sourceType":"module"}