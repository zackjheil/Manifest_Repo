{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zackj\\\\Documents\\\\GitHub\\\\Manifest_Repo\\\\src\\\\components\\\\Boards\\\\Boards.js\";\nimport React, { useEffect } from 'react';\nimport { Card, Container, Button } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport './Boards.css';\nimport Localbase from 'localbase';\nimport PlusButton from \"../../assets/Buttons/AddButton.svg\";\nimport DeleteButton from \"../../assets/Buttons/DeleteButton.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet db = new Localbase('Mani');\ndb.config.debug = false;\n\nconst Boards = ({\n  notes,\n  ide,\n  setNotes,\n  boardtitle,\n  setNoteId,\n  setNoteele,\n  setNoteTitle\n}) => {\n  window.onbeforeunload = function () {\n    window.setTimeout(function () {\n      window.location = '/';\n    }, 0);\n    window.onbeforeunload = null;\n  };\n  /*----------Professor Mauro's code if we need to fall back to it----------------\r\n      function deleteBoard(id, db) {\r\n          setNotes(notes.filter(n => n.id !== id))\r\n          db.collection('dbnotes').doc({id:id}).delete()\r\n      }\r\n  \r\n  \r\n      function getBoards(db) {\r\n          db.collection('dbnotes').get().then(dbnotes => {\r\n              //console.log('dbnotes', dbnotes);\r\n              setNotes(dbnotes)\r\n          });\r\n      }\r\n  \r\n      useEffect(() => {\r\n          getBoards(db);\r\n        }, []);   \r\n  --------------------------------------------------------------------------------*/\n\n\n  function addNoteToDB(ide, notes) {\n    var n = notes.length + 1;\n    notes.push({\n      id: n,\n      title: 'note ' + n,\n      noteele: []\n    });\n    db.collection('boards').doc({\n      id: ide\n    }).update({\n      notes: notes\n    });\n  }\n\n  function deleteNoteFromDB(ide, notes, givenId) {\n    var n = notes.findIndex(a => a.id === givenId);\n    notes.splice(n, 1);\n    {\n      /*console.log(notes)*/\n    }\n    db.collection('boards').doc({\n      id: ide\n    }).update({\n      notes: notes\n    });\n  }\n\n  function getNotes() {\n    db.collection('boards').doc({\n      id: ide\n    }).get().then(doc => {\n      {\n        /*console.log(doc)*/\n      }\n\n      if (doc) {\n        setNotes(doc.notes);\n      }\n    });\n  }\n\n  function changeBoardTitle(event) {\n    var newTitle = event.target.value;\n    db.collection('boards').doc({\n      id: ide\n    }).update({\n      title: newTitle\n    });\n    /* var newTitle=event.target.value\r\n     notes.filter(note =>{\r\n       if(note.id===noteId){\r\n         note.title=newTitle\r\n       }\r\n     })\r\n     db.collection('boards').doc({id:ide}).update({\r\n       notes:notes\r\n     })*/\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"appWidth\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"1\",\n        className: \"Header\",\n        onChange: changeBoardTitle,\n        children: boardtitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"notes\",\n        children: notes.map(a => {\n          var linker = boardtitle + '/' + a.title;\n          return /*#__PURE__*/_jsxDEV(Card, {\n            id: a.id,\n            className: \"cardBoard\",\n            children: [/*#__PURE__*/_jsxDEV(LinkContainer, {\n              to: linker,\n              children: /*#__PURE__*/_jsxDEV(Card.Body, {\n                onClick: () => {\n                  setNoteele(a.noteele);\n                  setNoteId(a.id);\n                  setNoteTitle(a.title);\n                },\n                children: /*#__PURE__*/_jsxDEV(Card.Title, {\n                  children: a.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"deleteButton\",\n              onClick: () => {\n                deleteNoteFromDB(ide, notes, a.id);\n              },\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: DeleteButton,\n                alt: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 102\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"addNote\",\n        onClick: () => {\n          addNoteToDB(ide, notes);\n        },\n        onFocus: getNotes(),\n        onvariant: \"info\",\n        type: \"submit\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: PlusButton,\n          alt: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 137\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Boards;\nexport default Boards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Boards\");","map":{"version":3,"sources":["C:/Users/zackj/Documents/GitHub/Manifest_Repo/src/components/Boards/Boards.js"],"names":["React","useEffect","Card","Container","Button","LinkContainer","Localbase","db","config","debug","Boards","notes","ide","setNotes","boardtitle","setNoteId","setNoteele","setNoteTitle","window","onbeforeunload","setTimeout","location","addNoteToDB","n","length","push","id","title","noteele","collection","doc","update","deleteNoteFromDB","givenId","findIndex","a","splice","getNotes","get","then","changeBoardTitle","event","newTitle","target","value","map","linker","DeleteButton","PlusButton"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {Card,Container, Button} from 'react-bootstrap';\r\nimport {LinkContainer} from 'react-router-bootstrap';\r\nimport './Boards.css';\r\nimport Localbase from 'localbase';\r\nimport PlusButton from \"../../assets/Buttons/AddButton.svg\"\r\nimport DeleteButton from '../../assets/Buttons/DeleteButton.svg'\r\n  let db = new Localbase('Mani');\r\n  db.config.debug = false\r\n\r\nconst Boards = ({notes,ide,setNotes,boardtitle,setNoteId,setNoteele,setNoteTitle}) => {\r\n  window.onbeforeunload = function() { \r\n    window.setTimeout(function () { \r\n        window.location = '/';\r\n    }, 0); \r\n    window.onbeforeunload = null; \r\n  }\r\n\r\n\r\n    \r\n/*----------Professor Mauro's code if we need to fall back to it----------------\r\n    function deleteBoard(id, db) {\r\n        setNotes(notes.filter(n => n.id !== id))\r\n        db.collection('dbnotes').doc({id:id}).delete()\r\n    }\r\n\r\n\r\n    function getBoards(db) {\r\n        db.collection('dbnotes').get().then(dbnotes => {\r\n            //console.log('dbnotes', dbnotes);\r\n            setNotes(dbnotes)\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getBoards(db);\r\n      }, []);   \r\n--------------------------------------------------------------------------------*/\r\nfunction addNoteToDB(ide, notes){\r\n    var n=notes.length+1\r\n    notes.push({\r\n      id: n,\r\n      title:'note '+ n,\r\n      noteele:[]\r\n    })\r\n      db.collection('boards').doc({id:ide}).update({\r\n      notes:notes\r\n    })\r\n  }\r\nfunction deleteNoteFromDB(ide,notes,givenId){\r\n        var n=notes.findIndex(a => a.id===givenId)\r\n        \r\n            notes.splice(n,1)\r\n            {/*console.log(notes)*/}\r\n      db.collection('boards').doc({id:ide}).update({\r\n        notes:notes\r\n      })\r\n    }\r\n\r\n\r\nfunction getNotes(){\r\n      db.collection('boards').doc({id:ide}).get().then(doc =>{\r\n          {/*console.log(doc)*/}\r\n        if(doc){\r\n        setNotes(doc.notes)\r\n        }\r\n      })\r\n      }\r\n      \r\nfunction changeBoardTitle(event){\r\n  var newTitle=event.target.value\r\n        db.collection('boards').doc({id:ide}).update({\r\n            title:newTitle\r\n        })\r\n       /* var newTitle=event.target.value\r\n        notes.filter(note =>{\r\n          if(note.id===noteId){\r\n            note.title=newTitle\r\n          }\r\n        })\r\n        db.collection('boards').doc({id:ide}).update({\r\n          notes:notes\r\n        })*/\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"appWidth\">\r\n            <Container>\r\n            <textarea rows=\"1\" className=\"Header\" onChange={changeBoardTitle}>{boardtitle}</textarea>\r\n            {/*----------Professor Mauro's code if we need to fall back to it----------------\r\n            notes.map((note) => (\r\n            <Card border=\"warning\" className=\"cardBoard\">\r\n                    <Card.Body>\r\n                    <i className=\"icon-trash float-right\" onClick={() => deleteBoard(note.id, db)}></i>\r\n                    <Card.Title>{note.title}</Card.Title>\r\n                    <Card.Text>\r\n                        {note.text}\r\n                    </Card.Text>\r\n                    </Card.Body>\r\n            </Card>\r\n            ))*/}\r\n            <div id='notes'>\r\n            {notes.map((a)=>{\r\n                var linker=boardtitle+'/'+a.title\r\n                return(\r\n                  <Card id={a.id} className=\"cardBoard\">\r\n                  <LinkContainer to={linker}>\r\n                      <Card.Body onClick={() => {setNoteele(a.noteele)\r\n                      setNoteId(a.id)\r\n                      setNoteTitle(a.title)}}>\r\n                          <Card.Title>{a.title}</Card.Title>\r\n                      </Card.Body>\r\n                  </LinkContainer>\r\n                  <button className=\"deleteButton\" onClick={() =>{deleteNoteFromDB(ide,notes,a.id)}}><img src={DeleteButton} alt=\"Delete\"/></button>\r\n                  </Card>\r\n                )\r\n                \r\n                })}\r\n            </div>\r\n                 \r\n                 <button className=\"addNote\" onClick={()=>{addNoteToDB(ide,notes)}} onFocus={getNotes()} onvariant=\"info\" type=\"submit\"><img src={PlusButton} alt=\"Add\"/></button>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Boards;"]},"metadata":{},"sourceType":"module"}