{"ast":null,"code":"/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { precachePlugins } from './utils/precachePlugins.js';\nimport './_version.js';\n\nvar installListener = function installListener(event) {\n  var precacheController = getOrCreatePrecacheController();\n  var plugins = precachePlugins.get();\n  event.waitUntil(precacheController.install({\n    event: event,\n    plugins: plugins\n  }).catch(function (error) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.error(\"Service worker installation failed. It will \" + \"be retried automatically during the next navigation.\");\n    } // Re-throw the error to ensure installation fails.\n\n\n    throw error;\n  }));\n};\n\nvar activateListener = function activateListener(event) {\n  var precacheController = getOrCreatePrecacheController();\n  event.waitUntil(precacheController.activate());\n};\n/**\r\n * Adds items to the precache list, removing any duplicates and\r\n * stores the files in the\r\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\r\n * worker installs.\r\n *\r\n * This method can be called multiple times.\r\n *\r\n * Please note: This method **will not** serve any of the cached files for you.\r\n * It only precaches files. To respond to a network request you call\r\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\r\n *\r\n * If you have a single array of files to precache, you can just call\r\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\r\n *\r\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\n\n\nfunction precache(entries) {\n  var precacheController = getOrCreatePrecacheController();\n  precacheController.addToCacheList(entries);\n\n  if (entries.length > 0) {\n    // NOTE: these listeners will only be added once (even if the `precache()`\n    // method is called multiple times) because event listeners are implemented\n    // as a set, where each listener must be unique.\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('install', installListener);\n    self.addEventListener('activate', activateListener);\n  }\n}\n\nexport { precache };","map":{"version":3,"sources":["C:/Users/zackj/Documents/GitHub/Manifest_Repo/node_modules/workbox-precaching/precache.js"],"names":["logger","getOrCreatePrecacheController","precachePlugins","installListener","event","precacheController","plugins","get","waitUntil","install","catch","error","process","env","NODE_ENV","activateListener","activate","precache","entries","addToCacheList","length","self","addEventListener"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,iCAAvB;AACA,SAASC,6BAAT,QAA8C,0CAA9C;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,OAAO,eAAP;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/B,MAAMC,kBAAkB,GAAGJ,6BAA6B,EAAxD;AACA,MAAMK,OAAO,GAAGJ,eAAe,CAACK,GAAhB,EAAhB;AACAH,EAAAA,KAAK,CAACI,SAAN,CAAgBH,kBAAkB,CAACI,OAAnB,CAA2B;AAAEL,IAAAA,KAAK,EAALA,KAAF;AAASE,IAAAA,OAAO,EAAPA;AAAT,GAA3B,EACXI,KADW,CACL,UAACC,KAAD,EAAW;AAClB,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCd,MAAAA,MAAM,CAACW,KAAP,CAAa,uGAAb;AAEH,KAJiB,CAKlB;;;AACA,UAAMA,KAAN;AACH,GARe,CAAhB;AASH,CAZD;;AAaA,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACX,KAAD,EAAW;AAChC,MAAMC,kBAAkB,GAAGJ,6BAA6B,EAAxD;AACAG,EAAAA,KAAK,CAACI,SAAN,CAAgBH,kBAAkB,CAACW,QAAnB,EAAhB;AACH,CAHD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACvB,MAAMb,kBAAkB,GAAGJ,6BAA6B,EAAxD;AACAI,EAAAA,kBAAkB,CAACc,cAAnB,CAAkCD,OAAlC;;AACA,MAAIA,OAAO,CAACE,MAAR,GAAiB,CAArB,EAAwB;AACpB;AACA;AACA;AACA;AACAC,IAAAA,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiCnB,eAAjC;AACAkB,IAAAA,IAAI,CAACC,gBAAL,CAAsB,UAAtB,EAAkCP,gBAAlC;AACH;AACJ;;AACD,SAASE,QAAT","sourcesContent":["/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport { precachePlugins } from './utils/precachePlugins.js';\r\nimport './_version.js';\r\nconst installListener = (event) => {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    const plugins = precachePlugins.get();\r\n    event.waitUntil(precacheController.install({ event, plugins })\r\n        .catch((error) => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.error(`Service worker installation failed. It will ` +\r\n                `be retried automatically during the next navigation.`);\r\n        }\r\n        // Re-throw the error to ensure installation fails.\r\n        throw error;\r\n    }));\r\n};\r\nconst activateListener = (event) => {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    event.waitUntil(precacheController.activate());\r\n};\r\n/**\r\n * Adds items to the precache list, removing any duplicates and\r\n * stores the files in the\r\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\r\n * worker installs.\r\n *\r\n * This method can be called multiple times.\r\n *\r\n * Please note: This method **will not** serve any of the cached files for you.\r\n * It only precaches files. To respond to a network request you call\r\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\r\n *\r\n * If you have a single array of files to precache, you can just call\r\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\r\n *\r\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction precache(entries) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    precacheController.addToCacheList(entries);\r\n    if (entries.length > 0) {\r\n        // NOTE: these listeners will only be added once (even if the `precache()`\r\n        // method is called multiple times) because event listeners are implemented\r\n        // as a set, where each listener must be unique.\r\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n        self.addEventListener('install', installListener);\r\n        self.addEventListener('activate', activateListener);\r\n    }\r\n}\r\nexport { precache };\r\n"]},"metadata":{},"sourceType":"module"}